---
format: gfm
---

```{r setup, include = FALSE}
library(knitr)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "..."
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})

knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)

library(md4r)
```

# md4r

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![R-CMD-check](https://github.com/rundel/md4r/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/rundel/md4r/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

md4r is a wrapper around the [md4c](https://github.com/mity/md4c) markdown parsing library. The goal is to provide a low level tool for reading markdown documents into 

## Installation

Currently this library is only available from [GitHub](https://github.com/) with, and can be installed using `devtools` with:

```r
# install.packages("devtools")
devtools::install_github("rundel/md4r")
```
## Example

We will start with a simple example of parsing a markdown file using the basic CommonMark dialect.

```{r example}
md_file = system.file("examples/commonmark.md", package = "md4r")
readLines(md_file) |> cat(sep='\n')
```

this file (or markdown text) can be processed using the `parse_md` function which creates an abstract syntax tree representation of the document (as a list of lists of lists ... with custom S3 classes)

```{r}
library(md4r)
(md = parse_md(md_file))
```

```{r output.lines=20}
str(md)
```

The resulting AST can then be manipulated and transformed into HTML

```{r}
#| results: asis
to_html(md) |> cat(sep='\n')
```

<br/>

or back into markdown

```{r}
to_md(md) |> cat(sep='\n')
```


