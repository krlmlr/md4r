---
format: gfm
---

```{r setup, include = FALSE}
library(knitr)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "..."
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})

knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)

library(md4r)
```

# md4r

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![R-CMD-check](https://github.com/rundel/md4r/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/rundel/md4r/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

Provides an R wrapper for the MD4C (Markdown for C) library.Functions exist for markdown parsing (CommonMark compliant) along with support for other common markdown extensions (e.g. GitHub flavored markdown, LaTeX equation support, etc.). The package also provides a number of high level functions for exploring and manipulating markdown ASTs as well as translating and displaying the documents.

## Installation

Install md4r from CRAN:

```r
install.packages("md4r")
```

or install the latest development version package from GitHub:

```r
remotes::install_github("rundel/md4r")
```


## Example

We will start with a simple example of parsing a markdown file using the basic CommonMark dialect.

```{r example}
md_file = system.file("examples/commonmark.md", package = "md4r")
readLines(md_file) |> cat(sep='\n')
```

this file (or markdown text) can be processed using the `parse_md` function which creates an abstract syntax tree representation of the document (as a list of lists of lists ... with custom S3 classes)

```{r}
library(md4r)
(md = parse_md(md_file))
```

```{r output.lines=20}
str(md)
```

As the AST is just a collection of R lists - we can use subsetting to extract specific elements of the document

```{r}
parse_md(md_file)[[1]]
```

```{r}
parse_md(md_file)[[2]]
```

```{r}
parse_md(md_file)[[3]]
```

or more advanced tools like `rapply()` to extract text content

```{r}
rapply(md, as.character, "md_text")
```


Additionally, the AST and any component can be converted back into markdown

```{r}
to_md(md) |> cat(sep='\n')
```

or into html

```{r}
#| eval: false
to_html(md) |> cat(sep='\n')
```


<blockquote>
```{r}
#| results: asis
#| echo: false
to_html(md) |> cat(sep='\n')
```
</blockquote>



